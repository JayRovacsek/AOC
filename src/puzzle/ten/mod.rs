mod test;

use rayon::prelude::*;

pub fn solve() {
    let asteroids = generate_asteroid_map(INPUT)
        .par_iter()
        .enumerate()
        .map(|x| {
            x.1.par_iter()
                .enumerate()
                .map(|y| if *y.1 { Some((x.0, y.0)) } else { None })
                .collect::<Vec<Option<(usize, usize)>>>()
        })
        .collect::<Vec<Vec<Option<(usize, usize)>>>>();

    println!("Asteroids: {:?}", asteroids);

    let a = generate_asteroid_map(INPUT)
        .par_iter()
        .enumerate()
        .map(|x| {
            x.1.par_iter()
                .enumerate()
                .map(|y| 0 as u32)
                .max()
                .unwrap_or(0_u32)
        })
        .max()
        .unwrap_or(0_u32);
}

fn visible(x0: i32, y0: i32, x1: i32, y1: i32) -> bool {
    false
}

fn generate_asteroid_map(input: &str) -> Vec<Vec<bool>> {
    input
        .chars()
        .map(|x| x == '#')
        .collect::<Vec<bool>>()
        .chunks(34 as usize)
        .map(|x| x.to_owned().to_vec())
        .collect::<Vec<Vec<bool>>>()
}

const INPUT: &'static str = "#.#....#.#......#.....#......####.#....#....##...#..#..##....#.##..##.#..#....#..#....##...###......##...........##..##..##.####.#.........##..##....##.#.....#.##....#..#..##.....#..#.......#.#.........##...###..##.###.#...................##...###.#.#.......#.#...##..#.#....#...##....#....##.#.....#...#.#..##........#.#...#..#...##...##....#.##.......#..#......#.....##..#....###..#..#...###...#.###...#.##..#........#....#.....##.....#.#.#...#....#.....#..#...###........#..##...#........#.#...#...##........#....#.#.#.#.....#...........#..........###.##...#..#.#....#..##..##..#..###.#.......##....##.#..#.....##...#.#.#........##..#..#.#..#..#.##..#.......#.#.#.........##.##...#.#.....#.#....###.#.........#..#..#.##...#......#......#..##.....##....#.#......##...#....#.##..#.#..#..#..#...........#......##...##....##...#......#.###.#..#.#...#.#......#.#.#.#....###..##.##...##.......#.......#.#.#.#...#...##........##..#.....#.......#....#...#...#........#....#...#.#..#....#.....#.##.##..##.#.#####..........##....####...##.#.....##.............#....##......#.#..#....###....##.........#..#.#####.#.................#....#.#..#.###....##.......##.#.";
