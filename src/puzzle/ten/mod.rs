mod test;

use rayon::prelude::*;

pub fn solve() {
    let asteroids = generate_asteroid_map(INPUT, 34);

    let answer_a = asteroids.len()
        - asteroids
            .par_iter()
            .map(|x| {
                asteroids
                    .iter()
                    .map(|y| {
                        asteroids
                            .iter()
                            .map(|z| {
                                if x != y && x != z && y != z {
                                    is_visible(*x, *y, *z)
                                } else {
                                    false
                                }
                            })
                            .filter(|a| *a)
                            .count()
                    })
                    .max()
                    .unwrap_or(0)
            })
            .max()
            .unwrap_or(0);

    println!("The answer for day 10, part a is: {:?}", answer_a);
}

fn is_visible(x: (f32, f32), y: (f32, f32), z: (f32, f32)) -> bool {
    let dxc = x.0 - y.0;
    let dyc = x.1 - y.1;

    let dxl = z.0 - y.0;
    let dyl = z.1 - y.1;

    let cross = dxc * dyl - dyc * dxl;
    cross == 0_f32
}

fn generate_asteroid_map(input: &str, width: usize) -> Vec<(f32, f32)> {
    if input.chars().count() % width != 0 {
        panic!("Odd number of inputs to process!");
    };

    input
        .chars()
        .map(|x| x == '#')
        .collect::<Vec<bool>>()
        .chunks(34 as usize)
        .enumerate()
        .map(|x| {
            x.1.iter()
                .enumerate()
                .filter(|y| *y.1)
                .map(|y| (x.0 as f32, y.0 as f32))
                .collect::<Vec<(f32, f32)>>()
        })
        .flatten()
        .collect::<Vec<(f32, f32)>>()
}

const INPUT: &'static str = "#.#....#.#......#.....#......####.#....#....##...#..#..##....#.##..##.#..#....#..#....##...###......##...........##..##..##.####.#.........##..##....##.#.....#.##....#..#..##.....#..#.......#.#.........##...###..##.###.#...................##...###.#.#.......#.#...##..#.#....#...##....#....##.#.....#...#.#..##........#.#...#..#...##...##....#.##.......#..#......#.....##..#....###..#..#...###...#.###...#.##..#........#....#.....##.....#.#.#...#....#.....#..#...###........#..##...#........#.#...#...##........#....#.#.#.#.....#...........#..........###.##...#..#.#....#..##..##..#..###.#.......##....##.#..#.....##...#.#.#........##..#..#.#..#..#.##..#.......#.#.#.........##.##...#.#.....#.#....###.#.........#..#..#.##...#......#......#..##.....##....#.#......##...#....#.##..#.#..#..#..#...........#......##...##....##...#......#.###.#..#.#...#.#......#.#.#.#....###..##.##...##.......#.......#.#.#.#...#...##........##..#.....#.......#....#...#...#........#....#...#.#..#....#.....#.##.##..##.#.#####..........##....####...##.#.....##.............#....##......#.#..#....###....##.........#..#.#####.#.................#....#.#..#.###....##.......##.#.";
